package com.salexandru.codeGeneration;

import java.io.IOException;
import java.io.Writer;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.processing.Filer;
import javax.lang.model.type.TypeMirror;

public class XPropertyGenarator {
	private Map<String, XPropertyComputer> properties_;
	
	public XPropertyGenarator() {
		properties_ = new HashMap<>();
	}

	public XPropertyComputer createPropertyComputer(TypeMirror elem) {
		if (!properties_.containsKey(elem.toString())) {
			properties_.put(elem.toString(), new XPropertyComputer(elem));
		}
		return properties_.get(elem.toString());
	}

	public XPropertyComputer getPropertyComputer(TypeMirror typeMirror) {
		return properties_.get(typeMirror.toString());
	}
	
	public void generate(Filer filer) throws IOException {
		for (XPropertyComputer pc: properties_.values()) {
			Writer out = filer.createSourceFile(pc.getQualifiedName()).openWriter();
			out.write(pc.toString());
			out.flush();
			out.close();
		}
	}
	
}
