package com.vvs.webserver.unittest.http;

import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.StringBufferInputStream;

import org.junit.Test;

import com.vvs.webserver.HTTP.HttpRequest;

public class HttpRequestTests {

	@Test(expected = IllegalArgumentException.class)
	public void testConstructorNull() {
		try {
			new HttpRequest(null);
		}  catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Test()
	public void testValidGet1() throws Exception {
		@SuppressWarnings("deprecation")
		StringBufferInputStream s = new StringBufferInputStream("GET / HTTP/1.1\r\nHost: www.example.com\r\nConnection: closed");
		HttpRequest request = new HttpRequest(s);
		assertEquals(request.getHttpMethod(), "GET");
		assertEquals(request.getPath(), "");
		assertEquals(request.getProtocol(), "HTTP/1.1");
		assertEquals(request.getRequest(), "GET / HTTP/1.1\r\nHost: www.example.com\r\nConnection: closed");
	}
	
	@Test()
	public void testValidGet2() throws Exception {
		@SuppressWarnings("deprecation")
		StringBufferInputStream s = new StringBufferInputStream("GET www.example.com/a/b/c/mere cu pere/si terte/a.html?am=pere HTTP/1.1\r\nHost: www.example.com\r\nConnection: closed");
		HttpRequest request = new HttpRequest(s);
		assertEquals(request.getHttpMethod(), "GET");
		assertEquals(request.getPath(), "");
		assertEquals(request.getProtocol(), "HTTP/1.1");
		assertEquals(request.getRequest(), "GET www.example.com/a/b/c/mere cu pere/si terte/a.html?am=pere HTTP/1.1\r\nHost: www.example.com\r\nConnection: closed");
	}
}
