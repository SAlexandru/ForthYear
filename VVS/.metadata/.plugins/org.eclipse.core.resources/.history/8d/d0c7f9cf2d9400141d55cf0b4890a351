package com.vvs.webserver.unittest.webserver;

import static org.junit.Assert.*;

import java.io.IOException;
import java.net.ServerSocket;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Random;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.vvs.webserver.WebServer;
import com.vvs.webserver.WebServerState;

public class WebServerTest {
	private Random rand;
	private ServerSocket ss;
	private WebServer[] servers;
	private Path base;
	private Path maitenance;

	@Before
	public void setUp() {
		rand = new Random(10);
		servers = new WebServer[15];

		base = Paths.get("./TestSite").toAbsolutePath().normalize();
		maitenance = Paths.get("./TestSite/maitenance").toAbsolutePath().normalize();

		try {
			ss = new ServerSocket(rand.nextInt(65535 - 1024) + 1025, 1000);
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		for (int i = 0; i < servers.length; ++i) {
			ServerSocket s;
			try {
				s = new ServerSocket(rand.nextInt(65535 - 1024) + 1025, 1000);
				servers[i] = new WebServer(s, base, maitenance, i + 3);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@After
	public void tearDown() {
		try {
			ss.close();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		for (int i = 0; i < servers.length; ++i) {
			try {
				servers[i].stop();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerNullSocket() throws IOException {
		new WebServer(null, Paths.get("./TestSite"),
				Paths.get("./TestSite/maitenance"), 2).close();
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerNullBase() throws IOException {
		new WebServer(ss, null, Paths.get("./TestSite/maitenance"), 2).close();
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerNullMaintenance() throws IOException {
		new WebServer(ss, Paths.get("./TestSite"), null, 2).close();
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerZeroThreads() throws IOException {
		new WebServer(ss, Paths.get("./TestSite"),
				Paths.get("./TestSite/maitenance"), 0).close();
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerAllNull() throws IOException {
		new WebServer(null, null, null, 0).close();
	}

	@Test
	public final void testWebServer() throws IOException {
		WebServer s = new WebServer(ss, Paths.get("./TestSite"),
				Paths.get("./TestSite/maitenance"), 2);
		assertNotNull(s);
		s.close();
	}

	@Test
	public final void testGetMaxNumberOfThreads() {
		assertEquals(0 + 3, servers[0].getMaxNumberOfThreads());

	}

	@Test
	public final void testSetMaxNumberOfThreads() {
		int maxNumber = rand.nextInt(10) + 2;
		servers[1].setMaxNumberOfThreads(maxNumber);
		assertEquals(maxNumber, servers[1].getMaxNumberOfThreads());
	}

	@Test
	public final void testGetMaintenancePath() {
		assertTrue(maitenance.toString().equals(servers[2].getMaintenancePath().toString()));
	}

	@Test
	public final void testSetMaintenancePath() throws IOException {
		Path newMaitenance = Paths.get("./../TestSite").toAbsolutePath().normalize();
		servers[3].setMaintenancePath(newMaitenance);
		assertTrue(newMaitenance.toString().equals(servers[3].getMaintenancePath().toString()));

	}

	@Test
	public final void testGetState() {
		assertEquals(WebServerState.STOPPED, servers[4].getState());
	}

	@Test
	public final void testSetState() throws IOException {
		WebServerState[] states = new WebServerState[] {
				WebServerState.MAINTENANCE, WebServerState.RUNNING };
		try {
			assertEquals(servers[5].getState(), WebServerState.STOPPED);
			WebServerState state = states[rand.nextInt(2)];
			servers[5].setState(state);
			assertEquals(servers[5].getState(), state);
			assertTrue(servers[5].isAlive());

		} catch (Exception e) {

		} finally {
			servers[5].close();
		}
	}

	@Test
	public final void testGetBaseDirectory() {
		assertTrue(base.toString().equals(servers[6].getBaseDirectory().toString()));
	}

	@Test
	public final void testSetBaseDirectory() throws IOException {
		Path newBase = Paths.get("./../TestSite").toAbsolutePath().normalize();
		servers[7].setBaseDirectory(newBase);
		assertTrue(newBase.toString().equals(servers[7].getBaseDirectory().toString()));
	}

	@Test
	public final void testIsAlive() {
		assertFalse(servers[8].isAlive());
		try {
			servers[8].start();
			assertTrue(servers[8].isAlive());
		} catch (IOException e) {
			try {
				servers[8].stop();
				assertFalse(servers[8].isAlive());
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}
	}
	
	@Test(expected = IllegalArgumentException.class)
	public final void testSetMaintenancePathNull() throws IOException {
		Path newMaitenance = Paths.get("./../TestSite").toAbsolutePath().normalize();
		servers[9].setMaintenancePath(null);
		assertTrue(newMaitenance.toString().equals(servers[9].getMaintenancePath().toString()));
	}
	
	@Test(expected = IllegalArgumentException.class)
	public final void testSetBaseDirectoryNull() throws IOException {
		Path newBase = Paths.get("./../TestSite").toAbsolutePath().normalize();
		servers[10].setBaseDirectory(null);
		assertTrue(newBase.toString().equals(servers[10].getBaseDirectory().toString()));
	}
}
