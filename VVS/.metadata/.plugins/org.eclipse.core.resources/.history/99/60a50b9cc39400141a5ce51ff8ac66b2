package com.vvs.webserver.ui;

import java.awt.EventQueue;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JPanel;
import javax.swing.SwingConstants;

import com.vvs.webserver.WebServer;
import com.vvs.webserver.WebServerState;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class WebServerUI {
	private File f_;
	private String ip_ = "127.0.0.1";
	private String port_ = "8011";
	private String basePath_ = "./TestSize";
	private String maintenancePath_ = "./TestSite/maintenance";
	private JFrame frame;
	private JTextField txtAddPort;
	private JTextField txtAddRootDir;
	private JTextField txtAddMtnDir;
	private JLabel lblNewServerStatus;
	private JLabel lblNewAddr;
	private JLabel lblPort;
	private JCheckBox chckbxMode;
	private JButton btnToggleButton;
	private JPanel infoPanel;
	private JPanel togglePanel;
	private JPanel configPanel;
	private JLabel lblRootcheck;
	private JLabel lblMtncheck;
	
	private WebServer srv;
	private ServerSocket skt;
	private Path root_ = Paths.get("./TestSite");
	private Path maintenance_ = Paths.get("./TestSite/maintenance");
	private JLabel lblRoodDir;
	private JLabel lblRValue;
	private JLabel lblMaintenanceDir;
	private JLabel lblMValue;
	private JButton btnSave;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					WebServerUI window = new WebServerUI();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 * @throws Exception 
	 */
	public WebServerUI() throws Exception {
		f_ = new File("configurationFile");
		if (!f_.exists()) {
			if (!f_.createNewFile()) {
				throw new RuntimeException("Cannot create configuration file");
			}
		}
		try (Scanner s = new Scanner(f_)) {
			ip_ = s.nextLine();
			port_ = s.nextLine();
			Integer.parseInt(port_);
			basePath_ = s.nextLine();
			root_ = Paths.get(basePath_).toAbsolutePath().normalize();
			File r = root_.toFile();
			if (!r.exists() || !r.isDirectory()) {
				throw new Exception("While reading config file: Root path must be a valid directory path");
			}
			maintenancePath_ = s.nextLine();
			maintenance_ = Paths.get(maintenancePath_).toAbsolutePath().normalize();
			File m = maintenance_.toFile();
			if (!m.exists() || !m.isDirectory()) {
				throw new Exception("While reading config file: Maintenace path must be a valid directory path");
			}
		}
		catch (NoSuchElementException e)
		{
			
		}
		try {
			skt = new ServerSocket(Integer.parseInt(port_), 100);
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		srv = new WebServer(skt, root_, maintenance_, 10);
		
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setBounds(100, 100, 606, 581);

		frame.getContentPane().setLayout(new BorderLayout(0, 0));
		
		infoPanel = new JPanel();
		frame.getContentPane().add(infoPanel, BorderLayout.WEST);
		
		JLabel lblWebserverControl = new JLabel("WebServer control:");
		lblWebserverControl.setHorizontalAlignment(SwingConstants.CENTER);
		
		btnToggleButton = new JButton("Start server");
		btnToggleButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// start server, change text of button
				if(btnToggleButton == e.getSource())
				{
					if(lblNewServerStatus.getText().equals("Stopped"))
					{
						System.out.println("stopped, now starting");
						// server was turned on. Clicking the button again would stop the server.
						btnToggleButton.setText("Stop server");
						if(chckbxMode.isSelected())
							lblNewServerStatus.setText("Maintenance");
						else
							lblNewServerStatus.setText("Running");
						togglePanel.repaint();
						infoPanel.repaint();
						try {
							srv.setState(WebServerState.RUNNING);
							chckbxMode.setEnabled(true);
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					else
					if(lblNewServerStatus.getText().equals("Running") || lblNewServerStatus.getText().equals("Maintenance"))
					{
						System.out.println("running, now stopping");
						// server is turned off. Clicking again should start the server
						btnToggleButton.setText("Start server");
						lblNewServerStatus.setText("Stopped");
						togglePanel.repaint();
						infoPanel.repaint();
						try {
							srv.setState(WebServerState.STOPPED);
							chckbxMode.setEnabled(false);
						} catch (IOException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
					}
					
					lblRootcheck.setVisible(false);
					lblMtncheck.setVisible(false);
				}
			}
		});
		
		chckbxMode = new JCheckBox("Switch to maintenance mode");
		chckbxMode.setEnabled(false);
		chckbxMode.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				// if ItemEvent.DESELECTED;
				if(e.getStateChange() == ItemEvent.SELECTED)
				{
					// server is now entering maintenance mode
					lblNewServerStatus.setText("Maintenance");
					chckbxMode.setSelected(true);
					try {
						srv.setState(WebServerState.MAINTENANCE);
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				else
				if(e.getStateChange() == ItemEvent.DESELECTED)
				{
					// server is now entering maintenance mode
					lblNewServerStatus.setText("Running");
					chckbxMode.setSelected(false);
					try {
						srv.setState(WebServerState.RUNNING);
					} catch (IOException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
			}
		});
		GroupLayout gl_panel = new GroupLayout(infoPanel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel.createSequentialGroup()
							.addGap(28)
							.addGroup(gl_panel.createParallelGroup(Alignment.LEADING)
								.addComponent(btnToggleButton, GroupLayout.PREFERRED_SIZE, 155, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblWebserverControl, GroupLayout.PREFERRED_SIZE, 148, GroupLayout.PREFERRED_SIZE)))
						.addGroup(gl_panel.createSequentialGroup()
							.addContainerGap()
							.addComponent(chckbxMode, GroupLayout.PREFERRED_SIZE, 236, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.TRAILING)
				.addGroup(Alignment.LEADING, gl_panel.createSequentialGroup()
					.addGap(14)
					.addComponent(lblWebserverControl)
					.addGap(40)
					.addComponent(btnToggleButton)
					.addGap(42)
					.addComponent(chckbxMode)
					.addContainerGap(221, Short.MAX_VALUE))
		);
		infoPanel.setLayout(gl_panel);
		
		togglePanel = new JPanel();
		frame.getContentPane().add(togglePanel, BorderLayout.CENTER);
		
		JLabel lblInfo = new JLabel("WebServer info:");
		lblInfo.setHorizontalAlignment(SwingConstants.CENTER);
		
		JLabel lblServerStatus_1 = new JLabel("Server status:");
		
		lblNewServerStatus = new JLabel("Stopped");
		lblNewServerStatus.setHorizontalAlignment(SwingConstants.LEFT);
		
		JLabel lblNewLabel = new JLabel("Server address:");
		
		lblNewAddr = new JLabel(ip_);
		lblNewAddr.setHorizontalAlignment(SwingConstants.LEFT);
		
		JLabel lblServerListeningPort = new JLabel("Server listening port:");
		
		lblPort = new JLabel(port_);
		
		lblRoodDir = new JLabel("Root Dir:");
		
		lblRValue = new JLabel("./TestSite");
		lblRValue.setText(root_.toString());
		
		lblMaintenanceDir = new JLabel("Maintenance Dir:");
		
		lblMValue = new JLabel("./TestSite/maintenace");
		lblMValue.setText(maintenance_.toString());
		
		btnSave = new JButton("SaveConfig");
		btnSave.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				try {
					PrintWriter writer = new PrintWriter(f_);
					writer.println(ip_);
					writer.println(port_);
					writer.println(basePath_);
					writer.println(maintenancePath_);
					writer.flush();
					writer.close();
				} catch (FileNotFoundException e1) {
					JOptionPane.showMessageDialog(frame,
						    "Cannot find configuration file!",
						    "ConfigFile",
						    JOptionPane.ERROR_MESSAGE);
				}
				
			}
		});
		GroupLayout gl_panel_1 = new GroupLayout(togglePanel);
		gl_panel_1.setHorizontalGroup(
			gl_panel_1.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_panel_1.createSequentialGroup()
					.addGroup(gl_panel_1.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel_1.createSequentialGroup()
							.addContainerGap()
							.addGroup(gl_panel_1.createParallelGroup(Alignment.LEADING)
								.addComponent(lblNewLabel)
								.addComponent(lblServerStatus_1)
								.addComponent(lblServerListeningPort)
								.addComponent(lblRoodDir, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblMaintenanceDir))
							.addGap(18)
							.addGroup(gl_panel_1.createParallelGroup(Alignment.LEADING)
								.addComponent(lblMValue)
								.addComponent(lblRValue)
								.addComponent(lblPort, GroupLayout.PREFERRED_SIZE, 46, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblNewAddr, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE)
								.addComponent(lblNewServerStatus, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)))
						.addGroup(gl_panel_1.createSequentialGroup()
							.addGap(77)
							.addComponent(btnSave))
						.addGroup(gl_panel_1.createSequentialGroup()
							.addGap(76)
							.addComponent(lblInfo, GroupLayout.PREFERRED_SIZE, 222, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		gl_panel_1.setVerticalGroup(
			gl_panel_1.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_1.createSequentialGroup()
					.addContainerGap()
					.addComponent(lblInfo, GroupLayout.PREFERRED_SIZE, 90, GroupLayout.PREFERRED_SIZE)
					.addGap(29)
					.addGroup(gl_panel_1.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblServerStatus_1)
						.addComponent(lblNewServerStatus))
					.addGap(26)
					.addGroup(gl_panel_1.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblNewAddr)
						.addComponent(lblNewLabel))
					.addGap(26)
					.addGroup(gl_panel_1.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblPort)
						.addComponent(lblServerListeningPort))
					.addGap(18)
					.addGroup(gl_panel_1.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblRoodDir)
						.addComponent(lblRValue))
					.addGap(18)
					.addGroup(gl_panel_1.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblMaintenanceDir)
						.addComponent(lblMValue))
					.addGap(18)
					.addComponent(btnSave)
					.addContainerGap(26, Short.MAX_VALUE))
		);
		togglePanel.setLayout(gl_panel_1);
		
		configPanel = new JPanel();
		frame.getContentPane().add(configPanel, BorderLayout.SOUTH);
		
		JLabel lblNewLabel_1 = new JLabel("Server listening on port:");
		
		JLabel lblNewLabel_2 = new JLabel("Web root directory:");
		
		JLabel lblMaintenanceDirectory = new JLabel("Maintenance directory:");
		
		txtAddPort = new JTextField();
		txtAddPort.setColumns(10);
		txtAddPort.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// action is pressing enter
				 String t = txtAddPort.getText();
				 try {
					InetSocketAddress addr = new InetSocketAddress(Integer.parseInt(t));
					srv.bind(addr, 100);
					lblPort.setText(t);
					port_ = t;
					infoPanel.repaint();
				} catch (NumberFormatException e1) {
					JOptionPane.showMessageDialog(frame,
						    "Invalid port number, please introduce a number!",
						    "Port",
						    JOptionPane.ERROR_MESSAGE);
				} catch (IOException e1) {
					JOptionPane.showMessageDialog(frame,
						    "Cannot bind to specified port, please try another!",
						    "Port",
						    JOptionPane.ERROR_MESSAGE);
				}
			}
		});
		
		txtAddRootDir = new JTextField();
		txtAddRootDir.setColumns(10);
		txtAddRootDir.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// action is pressing enter
				 String t = txtAddRootDir.getText();
				 File newRoot = new File(t);
				 Boolean isDir = false;
				 Boolean doesExist = newRoot.exists();
				 // show validator label
				 if (doesExist)
				 {
					 System.out.println("Exists");
					 isDir = newRoot.isDirectory();
					 if (isDir)
					 {
						 try {
							root_ = Paths.get(t).toAbsolutePath().normalize();
							srv.setBaseDirectory(root_);
							basePath_ = root_.toString();
							lblRValue.setText(basePath_);
							ImageIcon icon = new ImageIcon("ok.jpg");
							lblRootcheck.setIcon(icon);
							lblRootcheck.setVisible(true);
						} catch (IOException e1) {
							ImageIcon icon = new ImageIcon("no.jpg");
							lblRootcheck.setIcon(icon);
							lblRootcheck.setVisible(true);
						}
					 }
				 }
				 
				 if(!isDir)
				 {
						ImageIcon icon = new ImageIcon("no.jpg");
						lblRootcheck.setIcon(icon);
						lblRootcheck.setVisible(true);
				 }
			}
		});
		
		txtAddMtnDir = new JTextField();
		txtAddMtnDir.setColumns(10);
		txtAddMtnDir.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// action is pressing enter
				 String t = txtAddMtnDir.getText();
				 
				 File newMtn = new File(t);
				 Boolean isDir = false;
				 Boolean doesExist = newMtn.exists();
				 // show validator label
				 if (doesExist)
				 {
					 System.out.println("Exists");
					 isDir = newMtn.isDirectory();
					 if (isDir)
					 {
						maintenance_ = Paths.get(t).toAbsolutePath().normalize();
						try {
							srv.setMaintenancePath(maintenance_);
							maintenancePath_ = maintenance_.toString();
							lblMValue.setText(maintenancePath_);
							ImageIcon icon = new ImageIcon("ok.jpg");
							lblMtncheck.setIcon(icon);
							lblMtncheck.setVisible(true);
						} catch (IOException e1) {
							ImageIcon icon = new ImageIcon("no.jpg");
							lblMtncheck.setIcon(icon);
							lblMtncheck.setVisible(true);
						}
						
					 }
				 }
				 
				 if(!isDir)
				 {
						ImageIcon icon = new ImageIcon("no.jpg");
						lblMtncheck.setIcon(icon);
						lblMtncheck.setVisible(true);
				 }
			}
		});
		
		JButton btnBrowseRoot = new JButton("...");
		btnBrowseRoot.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFileChooser openFile = new JFileChooser();
				openFile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                openFile.showOpenDialog(null);
                String t = openFile.getSelectedFile().getPath();
                txtAddRootDir.setText(t);
			}
		});
		
		JButton btnBrowseMtn = new JButton("...");
		btnBrowseMtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFileChooser openFile = new JFileChooser();
				openFile.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                openFile.showOpenDialog(null);
                String t = openFile.getSelectedFile().getPath();
                txtAddMtnDir.setText(t);
			}
		});
		
		lblRootcheck = new JLabel("");
		lblRootcheck.setVisible(false);
		
		lblMtncheck = new JLabel("");
		lblMtncheck.setVisible(false);
		
		JButton btnSubmitconfig = new JButton("SubmitConfig");
		btnSubmitconfig.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				String port  = txtAddPort.getText().trim();
				String basePath = txtAddRootDir.getText().trim();
				String maintenancePath = txtAddMtnDir.getText().trim(); 
				String errorMsg = "";
				
				if (!port.isEmpty()) {
					try {
						Integer.parseInt(port);
						port_ = port;
						InetSocketAddress addr = new InetSocketAddress(Integer.parseInt(port));
						srv.bind(addr, 100);
						port_ = port;
						lblPort.setText(port_);
						lblPort.repaint();
					}
					catch (Exception e1) {
						errorMsg += e1.getMessage() + "\n";
					} 
				}
				if (!basePath.isEmpty()) {
					try {
						File r = Paths.get(basePath).toAbsolutePath().normalize().toFile();
						if (!r.exists() || !r.isDirectory()) {
							throw new Exception("Root directory must be a valid path to a directory!");
						}
						srv.setBaseDirectory(Paths.get(basePath).toAbsolutePath().normalize());
						basePath_ = basePath;
						root_ = Paths.get(basePath_).toAbsolutePath().normalize();
					}
					catch (Exception e1) {
						errorMsg += e1.getMessage() + "\n";
					}
				}
				if (!maintenancePath.isEmpty()) {
					try {
						File m = Paths.get(maintenancePath).toAbsolutePath().normalize().toFile();
						if (!m.exists() || !m.isDirectory()) {
							throw new Exception("Maitenance directory must be a valid path to a directory!");
						}
						srv.setMaintenancePath(Paths.get(maintenancePath).toAbsolutePath().normalize());
						basePath_ = basePath;
						root_ = Paths.get(basePath_).toAbsolutePath().normalize();
					}
					catch (Exception e1) {
						errorMsg += e1.getMessage() + "\n";
					}
				}
			}
		});
		
		JLabel lblSrvConfig = new JLabel("WebServer configuration:");
		lblSrvConfig.setHorizontalAlignment(SwingConstants.CENTER);
		GroupLayout gl_panel_2 = new GroupLayout(configPanel);
		gl_panel_2.setHorizontalGroup(
			gl_panel_2.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_2.createSequentialGroup()
					.addGroup(gl_panel_2.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel_2.createSequentialGroup()
							.addContainerGap()
							.addGroup(gl_panel_2.createParallelGroup(Alignment.LEADING)
								.addGroup(gl_panel_2.createSequentialGroup()
									.addGroup(gl_panel_2.createParallelGroup(Alignment.TRAILING)
										.addGroup(gl_panel_2.createSequentialGroup()
											.addComponent(lblNewLabel_1)
											.addGap(18))
										.addGroup(gl_panel_2.createSequentialGroup()
											.addComponent(lblNewLabel_2)
											.addGap(39)))
									.addGroup(gl_panel_2.createParallelGroup(Alignment.LEADING, false)
										.addComponent(txtAddPort, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
										.addComponent(txtAddRootDir, GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
										.addComponent(txtAddMtnDir)))
								.addComponent(lblMaintenanceDirectory))
							.addPreferredGap(ComponentPlacement.UNRELATED)
							.addGroup(gl_panel_2.createParallelGroup(Alignment.LEADING, false)
								.addComponent(btnBrowseMtn, 0, 0, Short.MAX_VALUE)
								.addComponent(btnBrowseRoot, GroupLayout.PREFERRED_SIZE, 35, Short.MAX_VALUE))
							.addPreferredGap(ComponentPlacement.RELATED)
							.addGroup(gl_panel_2.createParallelGroup(Alignment.LEADING)
								.addComponent(lblMtncheck)
								.addComponent(lblRootcheck)))
						.addGroup(gl_panel_2.createSequentialGroup()
							.addGap(189)
							.addComponent(btnSubmitconfig)))
					.addContainerGap(194, Short.MAX_VALUE))
				.addGroup(Alignment.TRAILING, gl_panel_2.createSequentialGroup()
					.addContainerGap(237, Short.MAX_VALUE)
					.addComponent(lblSrvConfig)
					.addGap(212))
		);
		gl_panel_2.setVerticalGroup(
			gl_panel_2.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_2.createSequentialGroup()
					.addContainerGap()
					.addComponent(lblSrvConfig)
					.addGap(5)
					.addGroup(gl_panel_2.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblNewLabel_1)
						.addComponent(txtAddPort, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
					.addGroup(gl_panel_2.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblNewLabel_2)
						.addComponent(txtAddRootDir, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(btnBrowseRoot, GroupLayout.PREFERRED_SIZE, 23, GroupLayout.PREFERRED_SIZE)
						.addComponent(lblRootcheck, GroupLayout.PREFERRED_SIZE, 40, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(gl_panel_2.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblMaintenanceDirectory)
						.addComponent(txtAddMtnDir, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(btnBrowseMtn)
						.addComponent(lblMtncheck, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(btnSubmitconfig)
					.addContainerGap())
		);
		configPanel.setLayout(gl_panel_2);
	}
}
