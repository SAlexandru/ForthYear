package com.vvs.webserver.unittest.webserver;

import static org.junit.Assert.*;

import java.io.IOException;
import java.net.ServerSocket;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Random;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.vvs.webserver.WebServer;

public class WebServerTest {
	private Random rand;
	private ServerSocket ss;
	private WebServer[] servers;
	private Path base;
	private Path maitenance;

	@Before
	public void setUp() {
		rand = new Random(10);
		servers = new WebServer[10];
		
		base = Paths.get("./TestSite");
		maitenance = Paths.get("./TestSite/maitenance");

		try {
			ss =  new ServerSocket(rand.nextInt(65535 - 1024) + 1025, 1000);
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		
		for (int i = 0; i < servers.length; ++i) {
			ServerSocket s;
			try {
				s = new ServerSocket(rand.nextInt(65535 - 1024) + 1025, 1000);
				servers[i] = new WebServer(s, base, maitenance, i + 3);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@After
	public void tearDown() {
		try {
			ss.close();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		for (int i = 0; i < servers.length; ++i) {
			try {
				servers[i].stop();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerNullSocket() throws IOException {
		new WebServer(null, Paths.get("./TestSite"), Paths.get("./TestSite/maitenance"), 2).close();
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerNullBase() throws IOException {
		new WebServer(ss, null, Paths.get("./TestSite/maitenance"), 2).close();
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerNullMaintenance() throws IOException {
		new WebServer(ss, Paths.get("./TestSite"), null, 2).close();
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerZeroThreads() throws IOException {
		new WebServer(ss, Paths.get("./TestSite"), Paths.get("./TestSite/maitenance"), 0).close();
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerAllNull() throws IOException {
		new WebServer(null, null, null, 0).close();
	}
	
	@Test
	public final void testWebServer() throws IOException {
		WebServer s = new WebServer(ss, Paths.get("./TestSite"), Paths.get("./TestSite/maitenance"), 2);
		assertNotNull(s);
		s.close();
	}
	
	@Test
	public final void testGetMaxNumberOfThreads() {
		for (int i = 0; i < servers.length; ++i) {
			assertEquals(i + 3, servers[i].getMaxNumberOfThreads());
		}
	}

	@Test
	public final void testSetMaxNumberOfThreads() {
		for (int i = 0; i < servers.length; ++i) {
			servers[i].setMaxNumberOfThreads(rand.nextInt(10) + 2);
			assertEquals(i + 3, servers[i].getMaxNumberOfThreads());
		}
	}

	@Test
	public final void testGetMaintenancePath() {
		for (WebServer s: servers) {
			assertTrue(maitenance.equals(s.getMaintenancePath()));
		}
	}

	@Test
	public final void testSetMaintenancePath() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testGetState() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testSetState() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testGetBaseDirectory() {
		for (WebServer s: servers) {
			assertTrue(base.equals(s.getBaseDirectory()));
		}
	}

	@Test
	public final void testSetBaseDirectory() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testGetSocketAddress() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testBindSocketAddress() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testBindSocketAddressInt() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testIsAlive() {
		for (WebServer s: servers) {
			
		}
	}

	@Test
	public final void testStart() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testRestart() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testJoin() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testStop() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testClose() {
		fail("Not yet implemented"); // TODO
	}

}
