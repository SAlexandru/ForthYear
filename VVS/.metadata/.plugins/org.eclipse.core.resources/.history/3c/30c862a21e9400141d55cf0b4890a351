package com.vvs.webserver.unittest.webserver;

import static org.junit.Assert.*;

import java.io.IOException;
import java.net.ServerSocket;
import java.nio.file.Paths;
import java.util.Random;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.vvs.webserver.WebServer;

public class WebServerTest {
	private Random rand;
	private WebServer[] servers;

	@Before
	public void setUp() {
		rand = new Random(10);
		servers = new WebServer[10];

		for (int i = 0; i < servers.length; ++i) {
			ServerSocket s;
			try {
				s = new ServerSocket(rand.nextInt(65535 - 1024) + 1025, 1000);
				servers[i] = new WebServer(s, Paths.get("./TestSite"),
						Paths.get("./TestSite/maitenance"), i + 3);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@After
	public void tearDown() {
		for (int i = 0; i < servers.length; ++i) {
			try {
				servers[i].stop();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerNullSocket() {
		new WebServer(null, Paths.get("./TestSite"),
				Paths.get("./TestSite/maitenance"), 2);
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerNullBase() {
		new WebServer(null, Paths.get("./TestSite"),
				Paths.get("./TestSite/maitenance"), 2);
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerNullMaintenance() {
		new WebServer(null, Paths.get("./TestSite"),
				Paths.get("./TestSite/maitenance"), 2);
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServerZeroThreads() {
		ServerSocket s;
		while (true) {
			try {
				s = new ServerSocket(rand.nextInt(65535 - 1024) + 1025, 1000);
				break;
			} catch (IOException e) {
			}
		}
		new WebServer(null, Paths.get("./TestSite"),
				Paths.get("./TestSite/maitenance"), 0);
	}

	@Test(expected = IllegalArgumentException.class)
	public final void testWebServer() {
		new WebServer(null, Paths.get("./TestSite"),
				Paths.get("./TestSite/maitenance"), 2);
	}

	@Test
	public final void testGetMaxNumberOfThreads() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testSetMaxNumberOfThreads() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testGetMaintenancePath() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testSetMaintenancePath() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testGetState() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testSetState() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testGetBaseDirectory() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testSetBaseDirectory() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testGetSocketAddress() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testBindSocketAddress() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testBindSocketAddressInt() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testIsAlive() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testStart() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testRestart() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testJoin() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testStop() {
		fail("Not yet implemented"); // TODO
	}

	@Test
	public final void testClose() {
		fail("Not yet implemented"); // TODO
	}

}
