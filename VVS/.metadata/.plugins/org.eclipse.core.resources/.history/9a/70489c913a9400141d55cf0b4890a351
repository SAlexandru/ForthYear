package com.vvs.webserver.unittest.webserver;

import static org.junit.Assert.*;

import java.io.PrintStream;

import org.junit.Test;

import com.vvs.webserver.Main;
import com.vvs.webserver.unittest.StringBufferOutputStream;

public class MainTests {
	
	@Test
	public final void testMainValid() throws InterruptedException {
		StringBufferOutputStream buff = new StringBufferOutputStream();
		PrintStream out = System.out;
		System.setOut(new PrintStream(buff));
		Thread t = new Thread(new Runnable() {
			@Override
			public void run() {
				Main.main(new String[] {"12346", ".", ".."});
			}
		});
		t.start();
		Thread.sleep(500);
		t.interrupt();
		assertEquals("", buff.toString());
		
		System.setOut(out);
	}

	@Test
	public final void testMainNull() {
		StringBufferOutputStream buff = new StringBufferOutputStream();
		PrintStream out = System.out;
		System.setOut(new PrintStream(buff));
		Main.main(null);
		assertEquals("Usage: java Main port basePath maitenancePath\nError: null\n", buff.toString());
		System.setOut(out);
	}
	
	@Test
	public final void testMainInvalidNumberOfParams0() throws Exception {
		StringBufferOutputStream buff = new StringBufferOutputStream();
		PrintStream out = System.out;
		System.setOut(new PrintStream(buff));
		Main.main(new String[0]);
		assertEquals("Usage: java Main port basePath maitenancePath\nError: 0\n", buff.toString());
		System.setOut(out);
	}
	
	@Test
	public final void testMainInvalidNumberOfParamsl() throws Exception {
		StringBufferOutputStream buff = new StringBufferOutputStream();
		PrintStream out = System.out;
		System.setOut(new PrintStream(buff));
		Main.main(new String[] {"10"});
		assertEquals("Usage: java Main port basePath maitenancePath\nError: 1\n", buff.toString());
		System.setOut(out);
	}
	
	@Test
	public final void testMainInvalidNumber() throws Exception {
		StringBufferOutputStream buff = new StringBufferOutputStream();
		PrintStream out = System.out;
		System.setOut(new PrintStream(buff));
		Main.main(new String[] {"tttlakakal"});
		assertEquals("Usage: java Main port basePath maitenancePath\nError: For input string: \"tttlakakal\"\n", buff.toString());
		System.setOut(out);
	}
	
	@Test
	public final void testMainInvalidNumber10() throws Exception {
		StringBufferOutputStream buff = new StringBufferOutputStream();
		PrintStream out = System.out;
		System.setOut(new PrintStream(buff));
		Main.main(new String[] {"10", ".", ".."});
		assertEquals("Usage: java Main port basePath maitenancePath\nError: port number must be between 1024 and 65535\n", buff.toString());
		System.setOut(out);
	}
	
	@Test
	public final void testMainInvalidNumber700000() throws Exception {
		StringBufferOutputStream buff = new StringBufferOutputStream();
		PrintStream out = System.out;
		System.setOut(new PrintStream(buff));
		Main.main(new String[] {"700000", ".", "..."});
		assertEquals("Usage: java Main port basePath maitenancePath\nError: port number must be between 1024 and 65535\n", buff.toString());
		System.setOut(out);
	}
	
	@Test
	public final void testMainInvalidBasePath() throws Exception {
		StringBufferOutputStream buff = new StringBufferOutputStream();
		PrintStream out = System.out;
		System.setOut(new PrintStream(buff));
		Main.main(new String[] {"123456", "...", "."});
		assertEquals("Usage: java Main port basePath maitenancePath\nError: base path and maitenance path must be real path to folders!\n", buff.toString());
		System.setOut(out);
	}
	
	@Test
	public final void testMainInvalidMaitenancePath() {
		StringBufferOutputStream buff = new StringBufferOutputStream();
		PrintStream out = System.out;
		System.setOut(new PrintStream(buff));
		Main.main(new String[] {"123456", "..", "...."});
		assertEquals("Usage: java Main port basePath maitenancePath\nError: base path and maitenance path must be real path to folders!\n", buff.toString());
		System.setOut(out);
	}
	
	@Test
	public final void testMainCannotListenToPort() {
		Thread t = new Thread(new Runnable() {
			@Override
			public void run() {
				try {
					Main.main(new String[] {"12347", ".", ".."});
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		t.start();
		StringBufferOutputStream buff = new StringBufferOutputStream();
		PrintStream out = System.out;
		System.setOut(new PrintStream(buff));
		Main.main(new String[] {"123456", "...", "."});
		assertEquals("Cannot listen to the port you specified\n", buff.toString());
		System.setOut(out);
		t.interrupt();
	}

}
